function MosaicConnectorFull

    recomputePhase1 = ~true;
    tmpDir = '/Users/nicolas/Documents/MATLAB/toolboxes/isetbio/calculators/mosaicConnector';
    
    if (recomputePhase1)
        % Select mosaics to load
        whichEye = 'right';
        mosaicFOVDegs = 15;
        eccentricitySamplesNumCones = 32;  
        eccentricitySamplesNumRGC = 32; 
        maxMovementPercentileCones = 20;
        maxMovementPercentileRGC = 20;
        bestIterationForConeMosaic = Inf;
        bestIterationForRGCMosaic = 95;

        % Connect mosaics only within a central region to save compute time
        connectivityRadiusDeg = 15;

        % Load data for the analyzed region
        [RGCRFPositionsMicrons, RGCRFSpacingsMicrons, conePositionsMicrons, desiredConesToRGCratios] = ...
            loadData(whichEye, mosaicFOVDegs, eccentricitySamplesNumCones, ...
            eccentricitySamplesNumRGC, maxMovementPercentileCones, ...
            maxMovementPercentileRGC, bestIterationForConeMosaic,  ...
            bestIterationForRGCMosaic, connectivityRadiusDeg);

        % Compute connection matrix between the 2 mosaics
        save(fullfile(tmpDir,'tmp2.mat'), 'RGCRFPositionsMicrons', 'conePositionsMicrons', 'RGCRFSpacingsMicrons', 'desiredConesToRGCratios');
        return;
    end
       
        
    % Options
    orphanRGCpolicy = 'remove' ; % valid options: {'remove', 'share input'}
        
    % Treshold (x mean spacing) for removing cones/rgcs that are too close
    thresholdFractionForMosaicIncosistencyCorrection = 0.5;
        
    centerEccDegs = [0 0];
    fovDegs = [20 0.5];  % up to 20
    postFix = sprintf('ecc_%2.1f_fov_%2.1f', centerEccDegs(1), fovDegs(1));
    
    % Specify center in microns
    roi.center = round(1000*WatsonRGCModel.rhoDegsToMMs(centerEccDegs));
    roi.size = round(1000*WatsonRGCModel.rhoDegsToMMs(fovDegs));
    roi.margin = 5;

        
    computeStep1 = ~true;
    computeStep2 = ~true;
    computeStep3 = ~true;
    computeStep4 = ~true;
    
    visualizeConnectionProcess = ~true;
    visualizeMosaic = ~true;
        
    % Instantiate a plotlab object
    plotlabOBJ = plotlab();

    % Apply the default plotlab recipe overriding 
    % the color order and the figure size
    figHeightInches = 11;
    plotlabOBJ.applyRecipe(...
        'renderer', 'painters', ... %'opengl', ...
        'axesBox', 'on', ...
        'colorOrder', [0 0 0; 1 0 0.5], ...
        'axesTickLength', [0.015 0.01]/2,...
        'axesFontSize', 22, ...
        'figureWidthInches', figHeightInches*(roi.size(1)-2*roi.margin)/(roi.size(2)-2*roi.margin), ...
        'figureHeightInches', figHeightInches);

    
    if (computeStep1)
        load(fullfile(tmpDir,'tmp2.mat'), 'RGCRFPositionsMicrons', 'conePositionsMicrons', 'RGCRFSpacingsMicrons', 'desiredConesToRGCratios');
        % Step 1. Remove inconstencies within and across mosaics
        [conePositionsMicrons, coneSpacingsMicrons,...
         RGCRFPositionsMicrons, RGCRFSpacingsMicrons, ...
         desiredConesToRGCratios] = improveMosaicStats(conePositionsMicrons, ...
                       RGCRFPositionsMicrons, RGCRFSpacingsMicrons, ...
                       desiredConesToRGCratios, ...
                       thresholdFractionForMosaicIncosistencyCorrection, roi);

        save(fullfile(tmpDir,sprintf('tmp2_step1_%s.mat', postFix)), 'RGCRFPositionsMicrons', 'conePositionsMicrons', ...
            'RGCRFSpacingsMicrons', 'coneSpacingsMicrons', 'desiredConesToRGCratios');
        %return;
    else
        load(fullfile(tmpDir,sprintf('tmp2_step1_%s.mat', postFix)), 'RGCRFPositionsMicrons', 'conePositionsMicrons', ...
            'RGCRFSpacingsMicrons', 'coneSpacingsMicrons', 'desiredConesToRGCratios');
    end
    
    
    %visualizeRGCmosaic(90,RGCRFPositionsMicrons, RGCRFSpacingsMicrons, roi, 'original', plotlabOBJ);
                   
    if (computeStep2)    
        % Step 2. Assign types (L,M,S) in the cone mosaic
        tritanopicAreaDiameterMicrons = 0.25 * 300;
        relativeSconeSpacing = 2.7;  % This results to around 8-9% S-cones
        LtoMratio = 2.0;  % Valid range: [0 - Inf]
        coneTypes = assignConeTypes(conePositionsMicrons, coneSpacingsMicrons, ...
            tritanopicAreaDiameterMicrons, relativeSconeSpacing, LtoMratio, roi, visualizeMosaic, plotlabOBJ);
        save(fullfile(tmpDir,sprintf('tmp2_step2_%s.mat', postFix)), 'coneTypes');
        %return;
    else
        load(fullfile(tmpDir,sprintf('tmp2_step2_%s.mat', postFix)), 'coneTypes');
    end
    
    
    if (computeStep3)  
    % Step 3. Connect cone to the midget RGC mosaic
        [midgetRGCconnectionMatrix, ...
         RGCRFPositionsMicrons, ...
         RGCRFSpacingsMicrons] = computeConnectionMatrix(...
                RGCRFPositionsMicrons, conePositionsMicrons, ...
                RGCRFSpacingsMicrons, coneSpacingsMicrons, ...
                coneTypes, desiredConesToRGCratios, ...
                orphanRGCpolicy, visualizeConnectionProcess);
        save(fullfile(tmpDir,sprintf('tmp2_step3_%s.mat', postFix)), 'midgetRGCconnectionMatrix', ...
                    'RGCRFPositionsMicrons', 'RGCRFSpacingsMicrons');
        %return;
    else
        load(fullfile(tmpDir,sprintf('tmp2_step3_%s.mat', postFix)), 'midgetRGCconnectionMatrix', ...
                    'RGCRFPositionsMicrons', 'RGCRFSpacingsMicrons');
    end
    
    zLevels = [0.3 1 ];
    whichLevelsToContour = [1];
    
    depictRGCTesselationForASubregion = true;
    if (depictRGCTesselationForASubregion)
        
        displayIDs = ~true;
        displayEllipseInsteadOfContour = true;
        % Visualize tesselation is some patchES
        
   
        eccsDisplayed =  5; % logspace(log10(0.2), log10(9), 6);
        
        for k = 1:numel(eccsDisplayed)
            
            patchEccDegs = [eccsDisplayed(k) 0];
            if (eccsDisplayed(k) <= 4)
                patchSizeDegs = 0.25*[1.5  1];
            else
                patchSizeDegs = 0.8*[1.5  1];
            end
            patchSizeDegs = [0.5 0.5];
            
            figHeightInches = 15;
            
            subregion.center = round(1000*WatsonRGCModel.rhoDegsToMMs(patchEccDegs));
            subregion.size = round(1000*WatsonRGCModel.rhoDegsToMMs(patchSizeDegs));
            subregion.margin = roi.margin;

            
            plotlabOBJ.applyRecipe(...
                'renderer', 'painters', ... %'opengl', ...
                'axesBox', 'on', ...
                'colorOrder', [0 0 0; 1 0 0.5], ...
                'axesTickLength', [0.015 0.01]/4,...
                'axesFontSize', 22, ...
                'figureWidthInches', figHeightInches/(subregion.size(2)-2*subregion.margin)*(subregion.size(1)-2*subregion.margin), ...
                'figureHeightInches', figHeightInches);

            xPos = RGCRFPositionsMicrons(:,1);
            yPos = RGCRFPositionsMicrons(:,2);
            subregionRGCidx = find( (xPos> subregion.center(1) - subregion.size(1)/2) & ...
                                    (xPos< subregion.center(1) + subregion.size(1)/2) & ...
                                    (yPos> subregion.center(2) - subregion.size(2)/2) & ...
                                    (yPos< subregion.center(2) + subregion.size(2)/2));

            subregionMidgetRGCconnectionMatrix = midgetRGCconnectionMatrix(:,subregionRGCidx);
            subregionRGCRFPositionsMicrons = RGCRFPositionsMicrons(subregionRGCidx,:);
            visualizeRFs(patchEccDegs, zLevels, whichLevelsToContour, subregionMidgetRGCconnectionMatrix, conePositionsMicrons, ...
                subregionRGCRFPositionsMicrons, coneSpacingsMicrons, coneTypes, subregion, displayEllipseInsteadOfContour, ...
                displayIDs, plotlabOBJ);
        end
        
    end
    
    %visualizeRGCmosaic(91,RGCRFPositionsMicrons, RGCRFSpacingsMicrons, roi, 'final', plotlabOBJ);
         
    if (computeStep4)  
        % Compute RF sizes via ellipse fitting
        [semiAxes,rfCenters] = computeRFsizes(zLevels, whichLevelsToContour, midgetRGCconnectionMatrix, conePositionsMicrons, RGCRFPositionsMicrons, coneSpacingsMicrons, coneTypes, roi);
        save(fullfile(tmpDir,sprintf('tmp2_step4_%s.mat', postFix)), 'semiAxes','rfCenters');
    else
        load(fullfile(tmpDir,sprintf('tmp2_step4_%s.mat', postFix)), 'semiAxes','rfCenters');
    end
    
    plotlabOBJ.applyRecipe(...
        'renderer', 'painters', ...
        'axesBox', 'off', ...
        'colorOrder', [0 0 1; 0.2 0.6 0.5], ...
        'axesTickLength', [0.015 0.01],...
        'axesFontSize', 16, ...
        'figureWidthInches', 12/2, ...
        'figureHeightInches', 9/2);
    
    hFig = figure(222); clf;
    midgetDenditicTreeDiameterArcMinDacey = DaceyData(); hold on;
    scatter(midgetDenditicTreeDiameterArcMinDacey(:,1), midgetDenditicTreeDiameterArcMinDacey(:,2), 100);
    
    set(gca, 'XLim', [0.1 40], 'YLim', [0.5 30], 'YScale', 'log', 'XScale', 'log');
    set(gca, 'XTick', [0.1 0.3 1 3 10 30], 'YTick', [1 3 10 30 100]);
    legend({ ...
            sprintf('Dacey & Petersen (1992), N = %d', size(midgetDenditicTreeDiameterArcMinDacey,1)), ...
            });
    ylabel('\it mRGC dendrite diam. (arc min)');
    xlabel('\it eccentricity (degs)');
    drawnow;
    fName = sprintf('SemiAxes1');
    plotlabOBJ.exportFig(hFig, 'png', fName, fullfile(pwd(), 'exports'));
    
    
    plotlabOBJ.applyRecipe(...
        'renderer', 'painters', ...
        'axesBox', 'off', ...
        'colorOrder', [.9 0.1 0.1; 0 0 1; 0.2 0.6 0.5], ...
        'axesTickLength', [0.015 0.01],...
        'axesFontSize', 22, ...
        'figureWidthInches', 12, ...
        'figureHeightInches', 9);
    
    hFig = figure(222); clf;
    eccNeuronsMicrons = sqrt(sum(rfCenters.^2,2));
    eccNeuronsDegs = WatsonRGCModel.rhoMMsToDegs(eccNeuronsMicrons/1000);
    rfCenterRadiusDegs = WatsonRGCModel.rhoMMsToDegs(mean(semiAxes,2)/1000);
    
    scatter(eccNeuronsDegs, 2*rfCenterRadiusDegs*60, 16); hold on;
    
    midgetDenditicTreeDiameterArcMinDacey = DaceyData();
    scatter(midgetDenditicTreeDiameterArcMinDacey(:,1), midgetDenditicTreeDiameterArcMinDacey(:,2), 100);
    
    midgetRGCDendriticFieldRadiusCowey = CoweyPerryData();
    scatter(midgetRGCDendriticFieldRadiusCowey(:,1), 2*midgetRGCDendriticFieldRadiusCowey(:,2)*60, 144);
    
    set(gca, 'XLim', [0.1 40], 'YLim', [0.5 30], 'YScale', 'log', 'XScale', 'log');
    set(gca, 'XTick', [0.1 0.3 1 3 10 30], 'YTick', [1 3 10 30 100]);
    legend({sprintf('ISETBio (2020), N = %d',numel(eccNeuronsDegs)), ...
            sprintf('Dacey & Petersen (1992), N = %d', size(midgetDenditicTreeDiameterArcMinDacey,1)), ...
            sprintf('Perry & Cowey (1984), N = %d', size(midgetRGCDendriticFieldRadiusCowey,1))});
    ylabel('mRGC dendritic field diameter (arc min)');
    xlabel('eccentricity (degs)');
    drawnow;

    fName = sprintf('SemiAxes2');
    plotlabOBJ.exportFig(hFig, 'png', fName, fullfile(pwd(), 'exports'));
    
end


function midgetRGCDendriticFieldRadius = CoweyPerryData()
    midgetRGCDendriticFieldRadius = [...
7.865168539326E-1	2.139552450194E-2; ...
1.741573033708E0	1.631337928430E-2; ...
2.022471910112E0	2.092342555000E-2; ...
2.528089887640E0	2.300302143329E-2; ...
2.247191011236E0	1.671230289869E-2; ...
3.146067415730E0	1.583419884808E-2; ...
3.876404494382E0	2.084552922293E-2; ...
3.876404494382E0	1.580351241620E-2; ...
4.494382022472E0	1.871872344443E-2; ...
4.606741573034E0	1.325181758096E-2; ...
5.056179775281E0	1.743461429516E-2; ...
5.449438202247E0	1.237607402512E-2; ...
5.730337078652E0	1.530544802191E-2; ...
6.292134831461E0	1.822301954490E-2; ...
5.842696629213E0	3.126711358701E-2; ...
6.067415730337E0	2.621565480125E-2; ...
6.741573033708E0	2.156548012463E-2; ...
6.853932584270E0	3.080445661411E-2; ...
7.359550561798E0	2.574119535455E-2; ...
7.415730337079E0	3.540270040601E-2; ...
7.415730337079E0	4.044471721273E-2; ...
8.033707865169E0	2.571286941743E-2; ...
8.146067415730E0	1.898545935228E-2; ...
7.696629213483E0	1.522283070532E-2; ...
9.044943820225E0	3.365357378907E-2; ...
9.101123595506E0	2.986970068926E-2; ...
1.039325842697E1	4.031961099046E-2; ...
1.033707865169E1	3.317911434237E-2; ...
1.157303370787E1	3.564819186101E-2; ...
1.258426966292E1	3.098385421584E-2; ...
1.258426966292E1	2.552166934189E-2; ...
1.213483146067E1	2.512038523274E-2; ...
1.264044943820E1	4.526720800680E-2; ...
1.308988764045E1	4.020630724200E-2; ...
1.342696629213E1	3.515012746672E-2; ...
1.432584269663E1	4.981824190350E-2; ...
1.426966292135E1	5.444245113776E-2; ...
1.432584269663E1	6.410395618922E-2; ...
1.522471910112E1	6.532669247474E-2; ...
1.612359550562E1	6.108724388632E-2; ...
1.662921348315E1	5.560381455953E-2; ...
1.634831460674E1	3.796855820980E-2; ...
1.792134831461E1	5.554952318006E-2; ...
1.792134831461E1	5.050750637334E-2; ...
1.882022471910E1	5.004957038995E-2; ...
1.955056179775E1	5.884241336984E-2; ...
1.926966292135E1	7.061892172599E-2; ...
1.971910112360E1	7.480171844019E-2; ...
1.949438202247E1	1.042229251251E-1; ...
2.067415730337E1	8.610612784440E-2; ...
2.084269662921E1	8.063686148617E-2; ...
2.073033707865E1	7.643990180342E-2; ...
2.106741573034E1	7.600557076763E-2; ...
2.157303370787E1	7.514399018034E-2; ...
2.056179775281E1	7.098479841375E-2; ...
2.061797752809E1	6.510008497781E-2; ...
2.073033707865E1	6.005334718157E-2; ...
2.191011235955E1	4.949957511094E-2; ...
2.286516853933E1	6.374516098574E-2; ...
2.297752808989E1	8.516901142479E-2; ...
2.460674157303E1	9.224341421962E-2; ...
2.595505617978E1	7.790104805967E-2; ...
2.606741573034E1	1.035265791710E-1; ...
2.651685393258E1	1.098102162213E-1; ...
2.601123595506E1	1.094112926069E-1; ...
2.696629213483E1	1.144131810027E-1; ...
2.780898876404E1	1.093357567746E-1; ...
2.792134831461E1	9.924700217166E-2; ...
2.904494382022E1	1.248300443773E-1; ...
2.904494382022E1	1.193678595034E-1; ...
2.994382022472E1	1.193300915872E-1; ...
3.084269662921E1	1.331578698895E-1; ...
2.904494382022E1	1.496199603437E-1; ...
3.000000000000E1	1.491596638655E-1; ...
3.219101123596E1	1.805802096119E-1 ...
];
end

function midgetDenditicTreeDiameterArcMin = DaceyData()
midgetDenditicTreeDiameterArcMin = [ ...
3.713236499979E-1	1.887473144244E0; ...
6.210982697020E-1	2.356002140967E0; ...
6.163336684615E-1	2.184223194472E0; ...
6.202547893511E-1	1.897309883672E0; ...
6.243705334948E-1	1.721024313978E0; ...
8.647332167874E-1	1.870047827799E0; ...
1.123830602895E0	2.552510608768E0; ...
1.122685747783E0	2.169898886845E0; ...
1.129828285605E0	1.884867176120E0; ...
1.403292552691E0	1.880389917334E0; ...
1.409344499356E0	1.180410464176E0; ...
1.655636023000E0	1.648290002988E0; ...
1.703604410824E0	1.560941258640E0; ...
1.619144849070E0	1.495615898608E0; ...
1.703025722518E0	1.478690242468E0; ...
1.985292414298E0	1.914252022902E0; ...
1.969527357945E0	1.699467901112E0; ...
1.997379914794E0	1.592329301306E0; ...
1.981114990122E0	1.368488419381E0; ...
1.907709121923E0	1.055767702644E0; ...
1.925463565043E0	1.460797650906E0; ...
1.871629773505E0	1.593465768330E0; ...
1.885970356995E0	1.700276427153E0; ...
2.535187198937E0	1.588169185718E0; ...
3.061392258356E0	1.785345264083E0; ...
3.221521634026E0	1.904111797702E0; ...
3.409045144428E0	1.565969683327E0; ...
3.702347152897E0	2.546764685482E0; ...
4.127552206407E0	2.685231623799E0; ...
4.094219197953E0	2.332877118920E0; ...
4.911427802186E0	2.891136370367E0; ...
5.879354392769E0	2.561458374354E0; ...
8.265729292199E0	3.034583692388E0; ...
8.278657196751E0	3.892621195388E0; ...
8.966519546052E0	4.105563643262E0; ...
9.432958711266E0	4.193103037908E0; ...
9.563757498948E0	3.762252789318E0; ...
1.066357951324E1	4.053635065356E0; ...
1.130348736184E1	4.370008873266E0; ...
1.188180364993E1	3.919427338039E0; ...
1.195902088622E1	3.479105617901E0; ...
1.114965272426E1	4.923475159077E0; ...
1.172886169132E1	4.974307469839E0; ...
1.182917366074E1	6.109894894649E0; ...
1.319399794053E1	6.949279310802E0; ...
1.231024607799E1	1.107807961212E1; ...
1.342885807340E1	1.155736499780E1; ...
1.381511306696E1	1.059512665726E1; ...
1.478578608073E1	5.294709733028E0; ...
1.355690641467E1	5.242680849609E0; ...
1.603500507657E1	6.859750863573E0; ...
1.628498882783E1	8.068030771504E0; ...
1.736733180552E1	7.235007552415E0; ...
1.893260415045E1	6.773523318254E0; ...
1.877970949943E1	5.884705596187E0; ...
1.734610328319E1	5.953951851884E0; ...
1.715310209711E1	1.001299414376E1; ...
1.680812572095E1	1.243668566083E1; ...
1.874231590020E1	1.354575459804E1; ...
1.928271236390E1	1.255314073128E1; ...
2.013565533905E1	1.241206266475E1; ...
2.147392369083E1	1.113051866853E1; ...
2.258946418948E1	1.124543546320E1; ...
2.146662932810E1	1.054401583510E1; ...
2.084660619518E1	9.883995469547E0; ...
2.135557589091E1	1.459138762927E1; ...
2.365448358530E1	1.733183449965E1; ...
2.137444824971E1	1.679658192319E1; ...
2.280124641806E1	1.572895383248E1; ...
2.450299333677E1	1.505040116606E1; ...
2.379850447613E1	1.441711310162E1; ...
2.518722871973E1	1.211638187849E1; ...
2.646867890658E1	1.040652589259E1; ...
2.707992812098E1	1.250645674225E1; ...
2.768459297870E1	1.334265402844E1; ...
2.956071628262E1	1.453942857730E1; ...
2.691239154972E1	1.471284880359E1; ...
2.596632836417E1	1.553739706641E1; ...
2.771282425166E1	1.569532394490E1; ...
2.617595406066E1	1.769156627043E1; ...
2.753950078366E1	1.826547202261E1; ...
2.657139255025E1	1.928911900131E1; ...
2.697463772745E1	2.125985860642E1; ...
2.875180936575E1	1.748303592618E1; ...
3.088927360129E1	1.601981904478E1; ...
3.247406330417E1	1.468255532532E1; ...
3.018178391613E1	1.262756861499E1; ...
3.014898884702E1	1.061915127777E1; ...
3.313156717019E1	1.132018353616E1; ...
3.310681278814E1	1.004923244358E1; ...
3.914518306774E1	1.245599603272E1; ...
4.149987505658E1	1.372207766710E1; ...
4.004645344216E1	1.480829668036E1; ...
3.540327149760E1	1.389565932075E1; ...
3.891622110179E1	1.546857476774E1; ...
3.622823417053E1	1.725096070429E1; ...
3.442746882472E1	1.617495413423E1; ...
3.322625427499E1	1.783741976944E1; ...
3.183393360004E1	1.946048075412E1; ...
3.004197033050E1	1.905571492657E1; ...
2.961902327357E1	1.990222287260E1; ...
3.009713618330E1	2.552558786780E1; ...
3.234560188037E1	2.469027129339E1; ...
3.352636697397E1	2.363449025689E1; ...
3.051861458857E1	2.340409931631E1; ...
3.117039567340E1	2.145723135979E1; ...
3.278742648737E1	2.144532777583E1; ...
3.397739339436E1	1.987226888334E1; ...
3.652814938323E1	2.029116193202E1; ...
3.681803666974E1	2.260951230941E1; ...
3.630955987320E1	2.465897470789E1; ...
3.428662032404E1	2.661727138626E1; ...
3.821136630743E1	2.658563964384E1; ...
3.931311314256E1	2.463748132041E1; ...
3.872278824978E1	2.211293849752E1; ...
3.897179099512E1	1.941733319801E1; ...
3.784102142815E1	1.781198538502E1; ...
4.039444284784E1	1.858702834124E1; ...
4.248999079925E1	1.857671702714E1; ...
4.534478741662E1	1.856346802816E1; ...
4.535095005372E1	1.896980451805E1; ...
4.876216957923E1	1.979365784132E1; ...
4.440868448144E1	2.114388778098E1; ...
4.191172392230E1	2.092947805663E1; ...
3.983657396739E1	2.027186856086E1; ...
4.224146489991E1	2.306963935429E1; ...
4.475198825340E1	2.280675574110E1; ...
4.197157120350E1	2.627227493082E1; ...
4.138910891376E1	2.834520681933E1; ...
3.796206286987E1	2.962785752582E1; ...
3.853293501987E1	3.195541674814E1; ...
4.452047253472E1	3.156123992878E1; ...
4.514700200234E1	2.925311421615E1; ...
4.643610098666E1	2.596054578740E1; ...
4.673787902375E1	2.304405029177E1; ...
4.987808066725E1	2.302761517042E1; ...
4.571085506050E1	2.113718426745E1; ...
5.283528789910E1	2.227757569180E1; ...
5.099873316911E1	2.510502417787E1; ...
4.958297229055E1	2.828908705113E1; ...
4.783670962620E1	2.955279451102E1; ...
4.650556866624E1	3.294237992102E1; ...
4.326984965107E1	3.369015367225E1; ...
5.682104782045E1	2.401246488598E1; ...
6.021853013298E1	2.505929229034E1; ...
5.812138449215E1	2.793570572555E1; ...
5.366262969035E1	2.648677006721E1; ...
5.065911588526E1	2.737852433555E1; ...
5.331251716249E1	2.951767421750E1; ...
5.257624276021E1	3.219333402703E1; ...
4.998665112517E1	3.256183128636E1; ...
4.895472102903E1	3.708809720347E1; ...
4.553312512354E1	3.593132396531E1; ...
4.027294243311E1	3.637142907061E1; ...
4.690012413053E1	4.002710810406E1; ...
5.005462763862E1	4.043395593134E1; ...
5.188185463868E1	3.870495897559E1; ...
5.571613087848E1	3.323503527583E1; ...
5.689831838438E1	2.981770092915E1; ...
5.474169970721E1	1.998375434885E1; ...
5.928205616867E1	2.062547633172E1; ...
6.464695294212E1	2.038397985372E1; ...
6.231084877128E1	1.829963448233E1; ...
5.874739839135E1	1.539883655101E1; ...
5.423693378416E1	1.444293287711E1; ...
4.830597502639E1	1.399911650549E1; ...
4.560537353237E1	1.462795223703E1; ...
5.822151855764E1	1.162180815138E1; ...
7.313044806768E1	2.195921449281E1; ...
6.812552073038E1	2.728968305297E1; ...
7.118247225754E1	2.974451479078E1; ...
7.286590889315E1	3.898076605627E1; ...
7.024234682060E1	3.576082625550E1; ...
6.627032207360E1	3.353294869813E1; ...
6.490223002723E1	3.819420504633E1; ...
6.832485988883E1	4.346892767704E1; ...
6.083267648737E1	3.991304014598E1; ...
5.864237507992E1	3.661609143157E1; ...
6.077070575933E1	3.393022582780E1; ...
6.251440905455E1	3.077033349359E1; ...
5.536014340153E1	3.784887880961E1; ...
5.500643043792E1	4.310323775063E1; ...
5.119663748178E1	4.653366588388E1; ...
4.727232337825E1	4.460037312898E1; ...
3.749124524157E1	4.056237262171E1; ...
3.309481732201E1	2.999550987709E1; ...
2.800877592943E1	2.696679818994E1; ...
2.438285807178E1	2.174934107207E1; ...
6.331667603772E1	2.347018877827E1 ...
];
end
