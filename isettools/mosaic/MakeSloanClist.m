function [Clist,nCones,nL,nM,nS] = MakeSloanClist(nConesReq,nMReq,nSReq,...ndim,sloanCompress,pixelJitter)% [Clist,nCones,nL,nM,nS] = MakeSloanClist(nConesReq,nMReq,nSReq,...%		ndim,sloanCompress,pixelJitter)%% Make a mosaic.  Uses Sloan algorithm for overall mosaic% and for S submosaic.  L and M cones chosen randomly.% The list is returned in sorted order, so that L cones% come first, then M and S respectively.%% 7/10/94		dhb		Changed name from SetUpCMosaic.% 7/16/94		dhb		Just make the list, changed name, variable names.% 12/30/04      dhb     Handle case of no S cones.% Choose overall receptor positionsClist = MakeSloanList(nConesReq,ndim,sloanCompress,pixelJitter);[nCones,null] = size(Clist);Clist(:,3) = 4*ones(nCones,1);% Select S cone submosaic by choosing nearest to a generated% submosaic.if (nSReq > 0)	S_list = MakeSloanList(nSReq,ndim,sloanCompress,pixelJitter);	[S_indices,nS] = FindNearestRec(S_list,Clist(:,1:2));	Clist(S_indices,3) = 3*ones(nS,1);	[null,indices] = sort(Clist(:,3));	Clist = Clist(indices,:);else	nS = 0;end% Choose M cone submosaic by randomly selecting from remainder.[M_indices,nM] = FindRandomRec(nMReq,Clist(nS+1:nCones,1:2));M_indices = M_indices + nS;Clist(M_indices,3) = 2*ones(nM,1);[null,indices] = sort(Clist(:,3));Clist = Clist(indices,:);% Choose L cone submosaic as everything left.L_indices = find( Clist(:,3) == 4);Clist(L_indices,3) = 1*ones(length(L_indices),1);nL = nCones - nM - nS;if (length(L_indices) ~= nL)	error('Logic error, number of L cones does not match');end% Sort list so that return order is L, M, S.[null,indices] = sort(Clist(:,3));Clist = Clist(indices,:);